#include <iostream>
#include<chrono>
#include<cstdlib>
using namespace std;
using namespace std:: chrono;
using std::ofstream;

int binarySearch(int arr[], int l, int r, int x)
{
	while (l <= r) {
		int m = l + (r - l) / 2;
		if (arr[m] == x)
			return m;
		if (arr[m] < x)
			l = m + 1;
		else
			r = m - 1;
	}
	return -1;
}

int* genlist(int arr[],int k)
{
  int val;
    for(int i=1;i<=k;i++)
    {

     arr[i]=rand();
  
    }
    return arr;
}

void timecomp(int arr[])

{

for(int i=1;i<=100;i=i+1)
{
    arr=genlist(arr,i);


auto start=high_resolution_clock :: now();

for(int j=1;j<=10;j++)
{
    binarySearch(arr,10,10,i);
}


auto stop=high_resolution_clock :: now();



auto duration = duration_cast<microseconds>(stop - start)/10;
float dur=duration.count();

cout<<i<<" " << dur<<endl;;
}

}
int main()
{
// 	int arr[] = { 2, 3, 4, 10, 40 };
// 	int x = 4;
// 	int n = sizeof(arr) / sizeof(arr[0]);
// 	int result = binarySearch(arr, 0, n - 1, x);
// 	(result == -1)
// 		? cout << "Element is not present in array"
// 		: cout << "Element is present at index " << result;
   int*arr=new int[10000000];



     timecomp(arr);
	return 0;
}

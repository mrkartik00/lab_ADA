#include<bits/stdc++.h>
#include<queue>
#include<vector>
using namespace std;


USING PRIORITY QUEUE-MAX HEAP



void KthSmallest(vector<int> arr,int n, int k){
    priority_queue<int> pq;
    for(int i=0;i<arr.size(); i++){
        pq.push(arr[i]);
        if(pq.size()>k)
        pq.pop();
    }
    cout<<pq.top()<<endl;
}
vector<int> randomnumbers(vector<int> arr, int n)
{
    int N = 100;
    for (int i = 0; i < n; i++)
    {
        arr.push_back(rand() % N);
    }

    return arr;
}

int main(){
    // vector<int> arr ={2,4,1,8,9,5,3,6,10,50};
    // int k=7;
    
     vector<int> arr;

    int input_size;

    for (int input_size = 1; input_size <= 100; input_size = input_size + 1)
    {
        arr = randomnumbers(arr, input_size);

        clock_t start, end;

        start = clock();

        for (int i = 0; i < 100; i++)
            KthSmallest(arr,10,4);

        end = clock();

        double time_taken = double(end - start) / CLOCKS_PER_SEC;

        double average_time = time_taken / 10;

        cout << "\nAverage Time taken by for input size " << input_size << " is : " << fixed
             << time_taken << setprecision(5);
        cout << " sec " << endl;
    }
    // KthSmallest(arr, 10, 7);
    return 0;
}


Graph for the time taken 
https://www.desmos.com/calculator/1ivdyskdjo
